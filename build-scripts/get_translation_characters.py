#!/usr/bin/env python3

# Use the Unicode Common Locale Data Repository to create code that
# creates ImGui glyph ranges for each locale, so that every locale can
# have properly rendered text.

import sys
from cldr_language_helpers import alphabets


def main():
    print("// generated by get_translation_characters.py; example:")
    print("//   ./build-scripts/get_translation_characters.py en ar cs da de "
          "el es fr hu id is it ja ko nb nl pl pt ru sr tr uk_UA zh_Hans "
          "zh_Hant > src/cldr/imgui-glyph-ranges.cpp\n")
    print("// NOLINTBEGIN(cata-static-declarations,readability-function-size)")
    try:
        for language in sys.argv[1:]:
            print_func(language)
        print("// NOLINTEND(cata-static-declarations,"
              "readability-function-size)")
        return 0
    except KeyError as x:
        print(f"Unknown language code “{x.args[0]}”", file=sys.stderr)
        return 1


def print_func(language):
    print(f"static void AddGlyphRangesFromCLDRFor{language.upper()}("
          "ImFontGlyphRangesBuilder *b) {{")
    # All of the glyphs used this language
    chars = []
    for c in alphabets.ALPHABETS_BY_LANG_MAP[language]:
        for g in c:
            chars.append(ord(g))
    for c in alphabets.ALPHABETS_BY_LANG_MAP[language]:
        for g in c.upper():
            chars.append(ord(g))
    for c in alphabets.NUMBERS_BY_LANG_MAP[language]:
        for g in c:
            chars.append(ord(g))
    for c in alphabets.PUNCTUATION_BY_LANG_MAP[language]:
        for g in c:
            chars.append(ord(g))
    # Sort and remove duplicates, so we can detect sequences
    chars = sorted(list(set(chars)))

    # Detect if this character is just one greater than the last character,
    # and so could be added with a for loop instead
    last_char = chars[0]
    output = [[last_char, 1]]
    for char in chars[1:]:
        if char - last_char == 1:
            output[-1][1] += 1
        else:
            output.append([char, 1])
        last_char = char

    for char, length in output:
        if length == 1:
            print(f"    b->AddChar({hex(char)});")
        # Don't add a for loop if it's neutral or requires more lines
        elif length < 4:
            for i in range(length):
                print(f"    b->AddChar({hex(char + i)});")
        else:
            print(f"    for(int i = 0; i < {length}; ++i)" + " {\n" +
                  f"        b->AddChar({hex(char)} + i);" + "\n" +
                  "    }")
    print("}\n")


if __name__ == '__main__':
    sys.exit(main())
